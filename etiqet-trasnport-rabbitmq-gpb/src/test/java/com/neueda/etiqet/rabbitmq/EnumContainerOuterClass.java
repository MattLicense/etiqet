// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EnumContainer.proto

package com.neueda.etiqet.rabbitmq;

public final class EnumContainerOuterClass {
  private EnumContainerOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface EnumContainerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:neueda.fix.EnumContainer)
      com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code neueda.fix.EnumContainer}
   */
  public  static final class EnumContainer extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:neueda.fix.EnumContainer)
      EnumContainerOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use EnumContainer.newBuilder() to construct.
    private EnumContainer(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private EnumContainer() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private EnumContainer(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return EnumContainerOuterClass.internal_static_neueda_fix_EnumContainer_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return EnumContainerOuterClass.internal_static_neueda_fix_EnumContainer_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              EnumContainerOuterClass.EnumContainer.class, EnumContainerOuterClass.EnumContainer.Builder.class);
    }

    /**
     * Protobuf enum {@code neueda.fix.EnumContainer.EventType}
     */
    public enum EventType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NONE_EVT = 0;</code>
       */
      NONE_EVT(0),
      /**
       * <code>ACCEPTED = 1;</code>
       */
      ACCEPTED(1),
      /**
       * <code>REJECTED = 2;</code>
       */
      REJECTED(2),
      /**
       * <code>FILLED = 3;</code>
       */
      FILLED(3),
      /**
       * <code>DONE = 4;</code>
       */
      DONE(4),
      /**
       * <code>EXPIRED = 5;</code>
       */
      EXPIRED(5),
      /**
       * <code>CANCEL = 6;</code>
       */
      CANCEL(6),
      /**
       * <code>CANCEL_ACCEPTED = 7;</code>
       */
      CANCEL_ACCEPTED(7),
      /**
       * <code>CANCEL_PENDING = 8;</code>
       */
      CANCEL_PENDING(8),
      /**
       * <code>CANCEL_REJECTED = 9;</code>
       */
      CANCEL_REJECTED(9),
      /**
       * <code>UNSOLICITED_CANCEL = 10;</code>
       */
      UNSOLICITED_CANCEL(10),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>NONE_EVT = 0;</code>
       */
      public static final int NONE_EVT_VALUE = 0;
      /**
       * <code>ACCEPTED = 1;</code>
       */
      public static final int ACCEPTED_VALUE = 1;
      /**
       * <code>REJECTED = 2;</code>
       */
      public static final int REJECTED_VALUE = 2;
      /**
       * <code>FILLED = 3;</code>
       */
      public static final int FILLED_VALUE = 3;
      /**
       * <code>DONE = 4;</code>
       */
      public static final int DONE_VALUE = 4;
      /**
       * <code>EXPIRED = 5;</code>
       */
      public static final int EXPIRED_VALUE = 5;
      /**
       * <code>CANCEL = 6;</code>
       */
      public static final int CANCEL_VALUE = 6;
      /**
       * <code>CANCEL_ACCEPTED = 7;</code>
       */
      public static final int CANCEL_ACCEPTED_VALUE = 7;
      /**
       * <code>CANCEL_PENDING = 8;</code>
       */
      public static final int CANCEL_PENDING_VALUE = 8;
      /**
       * <code>CANCEL_REJECTED = 9;</code>
       */
      public static final int CANCEL_REJECTED_VALUE = 9;
      /**
       * <code>UNSOLICITED_CANCEL = 10;</code>
       */
      public static final int UNSOLICITED_CANCEL_VALUE = 10;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static EventType valueOf(int value) {
        return forNumber(value);
      }

      public static EventType forNumber(int value) {
        switch (value) {
          case 0: return NONE_EVT;
          case 1: return ACCEPTED;
          case 2: return REJECTED;
          case 3: return FILLED;
          case 4: return DONE;
          case 5: return EXPIRED;
          case 6: return CANCEL;
          case 7: return CANCEL_ACCEPTED;
          case 8: return CANCEL_PENDING;
          case 9: return CANCEL_REJECTED;
          case 10: return UNSOLICITED_CANCEL;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<EventType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          EventType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<EventType>() {
              public EventType findValueByNumber(int number) {
                return EventType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return EnumContainerOuterClass.EnumContainer.getDescriptor().getEnumTypes().get(0);
      }

      private static final EventType[] VALUES = values();

      public static EventType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private EventType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:neueda.fix.EnumContainer.EventType)
    }

    /**
     * Protobuf enum {@code neueda.fix.EnumContainer.Side}
     */
    public enum Side
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NONE_S = 0;</code>
       */
      NONE_S(0),
      /**
       * <code>BUY = 1;</code>
       */
      BUY(1),
      /**
       * <code>SELL = 2;</code>
       */
      SELL(2),
      /**
       * <code>SELL_SHORT = 3;</code>
       */
      SELL_SHORT(3),
      /**
       * <code>SELL_SHORT_EXEMPT = 4;</code>
       */
      SELL_SHORT_EXEMPT(4),
      /**
       * <code>BUY_MINUS = 5;</code>
       */
      BUY_MINUS(5),
      /**
       * <code>SELL_SIDE_PLUS = 6;</code>
       */
      SELL_SIDE_PLUS(6),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>NONE_S = 0;</code>
       */
      public static final int NONE_S_VALUE = 0;
      /**
       * <code>BUY = 1;</code>
       */
      public static final int BUY_VALUE = 1;
      /**
       * <code>SELL = 2;</code>
       */
      public static final int SELL_VALUE = 2;
      /**
       * <code>SELL_SHORT = 3;</code>
       */
      public static final int SELL_SHORT_VALUE = 3;
      /**
       * <code>SELL_SHORT_EXEMPT = 4;</code>
       */
      public static final int SELL_SHORT_EXEMPT_VALUE = 4;
      /**
       * <code>BUY_MINUS = 5;</code>
       */
      public static final int BUY_MINUS_VALUE = 5;
      /**
       * <code>SELL_SIDE_PLUS = 6;</code>
       */
      public static final int SELL_SIDE_PLUS_VALUE = 6;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Side valueOf(int value) {
        return forNumber(value);
      }

      public static Side forNumber(int value) {
        switch (value) {
          case 0: return NONE_S;
          case 1: return BUY;
          case 2: return SELL;
          case 3: return SELL_SHORT;
          case 4: return SELL_SHORT_EXEMPT;
          case 5: return BUY_MINUS;
          case 6: return SELL_SIDE_PLUS;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Side>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Side> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Side>() {
              public Side findValueByNumber(int number) {
                return Side.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return EnumContainerOuterClass.EnumContainer.getDescriptor().getEnumTypes().get(1);
      }

      private static final Side[] VALUES = values();

      public static Side valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Side(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:neueda.fix.EnumContainer.Side)
    }

    /**
     * Protobuf enum {@code neueda.fix.EnumContainer.RejectReasonType}
     */
    public enum RejectReasonType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NONE_R = 0;</code>
       */
      NONE_R(0),
      /**
       * <code>NO_MARKET = 1;</code>
       */
      NO_MARKET(1),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>NONE_R = 0;</code>
       */
      public static final int NONE_R_VALUE = 0;
      /**
       * <code>NO_MARKET = 1;</code>
       */
      public static final int NO_MARKET_VALUE = 1;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static RejectReasonType valueOf(int value) {
        return forNumber(value);
      }

      public static RejectReasonType forNumber(int value) {
        switch (value) {
          case 0: return NONE_R;
          case 1: return NO_MARKET;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<RejectReasonType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          RejectReasonType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<RejectReasonType>() {
              public RejectReasonType findValueByNumber(int number) {
                return RejectReasonType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return EnumContainerOuterClass.EnumContainer.getDescriptor().getEnumTypes().get(2);
      }

      private static final RejectReasonType[] VALUES = values();

      public static RejectReasonType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private RejectReasonType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:neueda.fix.EnumContainer.RejectReasonType)
    }

    /**
     * Protobuf enum {@code neueda.fix.EnumContainer.StatusFlagType}
     */
    public enum StatusFlagType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NONE_F = 0;</code>
       */
      NONE_F(0),
      /**
       * <code>WILL_FILL = 1;</code>
       */
      WILL_FILL(1),
      /**
       * <code>LAST_FILL = 2;</code>
       */
      LAST_FILL(2),
      /**
       * <code>AGGRESSOR = 3;</code>
       */
      AGGRESSOR(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>NONE_F = 0;</code>
       */
      public static final int NONE_F_VALUE = 0;
      /**
       * <code>WILL_FILL = 1;</code>
       */
      public static final int WILL_FILL_VALUE = 1;
      /**
       * <code>LAST_FILL = 2;</code>
       */
      public static final int LAST_FILL_VALUE = 2;
      /**
       * <code>AGGRESSOR = 3;</code>
       */
      public static final int AGGRESSOR_VALUE = 3;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static StatusFlagType valueOf(int value) {
        return forNumber(value);
      }

      public static StatusFlagType forNumber(int value) {
        switch (value) {
          case 0: return NONE_F;
          case 1: return WILL_FILL;
          case 2: return LAST_FILL;
          case 3: return AGGRESSOR;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<StatusFlagType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          StatusFlagType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<StatusFlagType>() {
              public StatusFlagType findValueByNumber(int number) {
                return StatusFlagType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return EnumContainerOuterClass.EnumContainer.getDescriptor().getEnumTypes().get(3);
      }

      private static final StatusFlagType[] VALUES = values();

      public static StatusFlagType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private StatusFlagType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:neueda.fix.EnumContainer.StatusFlagType)
    }

    /**
     * <pre>
     *OrdType_enum_t
     * </pre>
     *
     * Protobuf enum {@code neueda.fix.EnumContainer.OrderType}
     */
    public enum OrderType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>NONE_ORD = 0;</code>
       */
      NONE_ORD(0),
      /**
       * <code>MARKET = 1;</code>
       */
      MARKET(1),
      /**
       * <code>LIMIT = 2;</code>
       */
      LIMIT(2),
      /**
       * <code>STOP_LOSS = 3;</code>
       */
      STOP_LOSS(3),
      /**
       * <code>STOP_LIMIT = 4;</code>
       */
      STOP_LIMIT(4),
      /**
       * <code>MARKET_ON_CLOSE = 5;</code>
       */
      MARKET_ON_CLOSE(5),
      /**
       * <code>WITH_OR_WITHOUT = 6;</code>
       */
      WITH_OR_WITHOUT(6),
      /**
       * <code>LIMIT_OR_BETTER = 7;</code>
       */
      LIMIT_OR_BETTER(7),
      /**
       * <code>LIMIT_WITH_OR_WITHOUT = 8;</code>
       */
      LIMIT_WITH_OR_WITHOUT(8),
      /**
       * <code>ON_BASIS = 9;</code>
       */
      ON_BASIS(9),
      /**
       * <code>ON_CLOSE = 10;</code>
       */
      ON_CLOSE(10),
      /**
       * <code>LIMIT_ON_CLOSE = 11;</code>
       */
      LIMIT_ON_CLOSE(11),
      /**
       * <code>FOREX_MARKET = 12;</code>
       */
      FOREX_MARKET(12),
      /**
       * <code>PREVIOUSLY_QUOTED = 13;</code>
       */
      PREVIOUSLY_QUOTED(13),
      /**
       * <code>PREVIOUSLY_INDICATED = 14;</code>
       */
      PREVIOUSLY_INDICATED(14),
      /**
       * <code>FOREX_LIMIT = 15;</code>
       */
      FOREX_LIMIT(15),
      /**
       * <code>FORTEX_PREVIOUSLY_QUOTED = 16;</code>
       */
      FORTEX_PREVIOUSLY_QUOTED(16),
      /**
       * <code>FUNARI = 17;</code>
       */
      FUNARI(17),
      /**
       * <code>MARKET_IF_TOUCHED = 18;</code>
       */
      MARKET_IF_TOUCHED(18),
      /**
       * <code>MARKET_WITH_LEFT_OVER_AS_LIMIT = 19;</code>
       */
      MARKET_WITH_LEFT_OVER_AS_LIMIT(19),
      /**
       * <code>PREVIOUS_FUND_VALUATION_POINT = 20;</code>
       */
      PREVIOUS_FUND_VALUATION_POINT(20),
      /**
       * <code>NEXT_FUND_VALUATION_POINT = 21;</code>
       */
      NEXT_FUND_VALUATION_POINT(21),
      /**
       * <code>PEGGED = 22;</code>
       */
      PEGGED(22),
      /**
       * <code>COUNT_ORDER_SELECTION = 23;</code>
       */
      COUNT_ORDER_SELECTION(23),
      /**
       * <code>STOP_ON_BID_OR_OFFER = 24;</code>
       */
      STOP_ON_BID_OR_OFFER(24),
      /**
       * <code>STOP_LIMIT_ON_BID_OR_OFFER = 25;</code>
       */
      STOP_LIMIT_ON_BID_OR_OFFER(25),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>NONE_ORD = 0;</code>
       */
      public static final int NONE_ORD_VALUE = 0;
      /**
       * <code>MARKET = 1;</code>
       */
      public static final int MARKET_VALUE = 1;
      /**
       * <code>LIMIT = 2;</code>
       */
      public static final int LIMIT_VALUE = 2;
      /**
       * <code>STOP_LOSS = 3;</code>
       */
      public static final int STOP_LOSS_VALUE = 3;
      /**
       * <code>STOP_LIMIT = 4;</code>
       */
      public static final int STOP_LIMIT_VALUE = 4;
      /**
       * <code>MARKET_ON_CLOSE = 5;</code>
       */
      public static final int MARKET_ON_CLOSE_VALUE = 5;
      /**
       * <code>WITH_OR_WITHOUT = 6;</code>
       */
      public static final int WITH_OR_WITHOUT_VALUE = 6;
      /**
       * <code>LIMIT_OR_BETTER = 7;</code>
       */
      public static final int LIMIT_OR_BETTER_VALUE = 7;
      /**
       * <code>LIMIT_WITH_OR_WITHOUT = 8;</code>
       */
      public static final int LIMIT_WITH_OR_WITHOUT_VALUE = 8;
      /**
       * <code>ON_BASIS = 9;</code>
       */
      public static final int ON_BASIS_VALUE = 9;
      /**
       * <code>ON_CLOSE = 10;</code>
       */
      public static final int ON_CLOSE_VALUE = 10;
      /**
       * <code>LIMIT_ON_CLOSE = 11;</code>
       */
      public static final int LIMIT_ON_CLOSE_VALUE = 11;
      /**
       * <code>FOREX_MARKET = 12;</code>
       */
      public static final int FOREX_MARKET_VALUE = 12;
      /**
       * <code>PREVIOUSLY_QUOTED = 13;</code>
       */
      public static final int PREVIOUSLY_QUOTED_VALUE = 13;
      /**
       * <code>PREVIOUSLY_INDICATED = 14;</code>
       */
      public static final int PREVIOUSLY_INDICATED_VALUE = 14;
      /**
       * <code>FOREX_LIMIT = 15;</code>
       */
      public static final int FOREX_LIMIT_VALUE = 15;
      /**
       * <code>FORTEX_PREVIOUSLY_QUOTED = 16;</code>
       */
      public static final int FORTEX_PREVIOUSLY_QUOTED_VALUE = 16;
      /**
       * <code>FUNARI = 17;</code>
       */
      public static final int FUNARI_VALUE = 17;
      /**
       * <code>MARKET_IF_TOUCHED = 18;</code>
       */
      public static final int MARKET_IF_TOUCHED_VALUE = 18;
      /**
       * <code>MARKET_WITH_LEFT_OVER_AS_LIMIT = 19;</code>
       */
      public static final int MARKET_WITH_LEFT_OVER_AS_LIMIT_VALUE = 19;
      /**
       * <code>PREVIOUS_FUND_VALUATION_POINT = 20;</code>
       */
      public static final int PREVIOUS_FUND_VALUATION_POINT_VALUE = 20;
      /**
       * <code>NEXT_FUND_VALUATION_POINT = 21;</code>
       */
      public static final int NEXT_FUND_VALUATION_POINT_VALUE = 21;
      /**
       * <code>PEGGED = 22;</code>
       */
      public static final int PEGGED_VALUE = 22;
      /**
       * <code>COUNT_ORDER_SELECTION = 23;</code>
       */
      public static final int COUNT_ORDER_SELECTION_VALUE = 23;
      /**
       * <code>STOP_ON_BID_OR_OFFER = 24;</code>
       */
      public static final int STOP_ON_BID_OR_OFFER_VALUE = 24;
      /**
       * <code>STOP_LIMIT_ON_BID_OR_OFFER = 25;</code>
       */
      public static final int STOP_LIMIT_ON_BID_OR_OFFER_VALUE = 25;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static OrderType valueOf(int value) {
        return forNumber(value);
      }

      public static OrderType forNumber(int value) {
        switch (value) {
          case 0: return NONE_ORD;
          case 1: return MARKET;
          case 2: return LIMIT;
          case 3: return STOP_LOSS;
          case 4: return STOP_LIMIT;
          case 5: return MARKET_ON_CLOSE;
          case 6: return WITH_OR_WITHOUT;
          case 7: return LIMIT_OR_BETTER;
          case 8: return LIMIT_WITH_OR_WITHOUT;
          case 9: return ON_BASIS;
          case 10: return ON_CLOSE;
          case 11: return LIMIT_ON_CLOSE;
          case 12: return FOREX_MARKET;
          case 13: return PREVIOUSLY_QUOTED;
          case 14: return PREVIOUSLY_INDICATED;
          case 15: return FOREX_LIMIT;
          case 16: return FORTEX_PREVIOUSLY_QUOTED;
          case 17: return FUNARI;
          case 18: return MARKET_IF_TOUCHED;
          case 19: return MARKET_WITH_LEFT_OVER_AS_LIMIT;
          case 20: return PREVIOUS_FUND_VALUATION_POINT;
          case 21: return NEXT_FUND_VALUATION_POINT;
          case 22: return PEGGED;
          case 23: return COUNT_ORDER_SELECTION;
          case 24: return STOP_ON_BID_OR_OFFER;
          case 25: return STOP_LIMIT_ON_BID_OR_OFFER;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<OrderType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          OrderType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<OrderType>() {
              public OrderType findValueByNumber(int number) {
                return OrderType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return EnumContainerOuterClass.EnumContainer.getDescriptor().getEnumTypes().get(4);
      }

      private static final OrderType[] VALUES = values();

      public static OrderType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private OrderType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:neueda.fix.EnumContainer.OrderType)
    }

    /**
     * <pre>
     *ExecInst_enum_t
     * </pre>
     *
     * Protobuf enum {@code neueda.fix.EnumContainer.ExecInstType}
     */
    public enum ExecInstType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>STAY_ON_OFFER_SIDE = 0;</code>
       */
      STAY_ON_OFFER_SIDE(0),
      /**
       * <code>NOT_HELD = 1;</code>
       */
      NOT_HELD(1),
      /**
       * <code>WORK = 2;</code>
       */
      WORK(2),
      /**
       * <code>GO_ALONG = 3;</code>
       */
      GO_ALONG(3),
      /**
       * <code>OVER_THE_DAY = 4;</code>
       */
      OVER_THE_DAY(4),
      /**
       * <code>HELD = 5;</code>
       */
      HELD(5),
      /**
       * <code>PARTICIPATE_DO_NOT_INITIATE = 6;</code>
       */
      PARTICIPATE_DO_NOT_INITIATE(6),
      /**
       * <code>STRICT_SCALE = 7;</code>
       */
      STRICT_SCALE(7),
      /**
       * <code>TRY_TO_SCALE = 8;</code>
       */
      TRY_TO_SCALE(8),
      /**
       * <code>STAY_ON_BID_SIDE = 9;</code>
       */
      STAY_ON_BID_SIDE(9),
      /**
       * <code>NO_CROSS = 10;</code>
       */
      NO_CROSS(10),
      /**
       * <code>OK_TO_CROSS = 11;</code>
       */
      OK_TO_CROSS(11),
      /**
       * <code>CALL_FIRST = 12;</code>
       */
      CALL_FIRST(12),
      /**
       * <code>PRECENT_OF_VOLUME = 13;</code>
       */
      PRECENT_OF_VOLUME(13),
      /**
       * <code>NO_NOT_INCREASE = 14;</code>
       */
      NO_NOT_INCREASE(14),
      /**
       * <code>NO_NOT_REDUCE = 15;</code>
       */
      NO_NOT_REDUCE(15),
      /**
       * <code>ALL_OR_NONE = 16;</code>
       */
      ALL_OR_NONE(16),
      /**
       * <code>REINSTATE_ON_SYSTEM_FAILURE = 17;</code>
       */
      REINSTATE_ON_SYSTEM_FAILURE(17),
      /**
       * <code>INSTITUNIONS_ONLY = 18;</code>
       */
      INSTITUNIONS_ONLY(18),
      /**
       * <code>REINSTATE_ON_TRADING_HALT = 19;</code>
       */
      REINSTATE_ON_TRADING_HALT(19),
      /**
       * <code>CACEL_ON_TRADING_HALT = 20;</code>
       */
      CACEL_ON_TRADING_HALT(20),
      /**
       * <code>LAST_PEG = 21;</code>
       */
      LAST_PEG(21),
      /**
       * <code>MID_PRICE_PEG = 22;</code>
       */
      MID_PRICE_PEG(22),
      /**
       * <code>NON_NEGOTIABLE = 23;</code>
       */
      NON_NEGOTIABLE(23),
      /**
       * <code>OPENING_PEG = 24;</code>
       */
      OPENING_PEG(24),
      /**
       * <code>MARKET_PEG = 25;</code>
       */
      MARKET_PEG(25),
      /**
       * <code>CANCEL_ON_SYSTEM_FAILURE = 26;</code>
       */
      CANCEL_ON_SYSTEM_FAILURE(26),
      /**
       * <code>PRIMARY_PEG = 27;</code>
       */
      PRIMARY_PEG(27),
      /**
       * <code>SUSPEND = 28;</code>
       */
      SUSPEND(28),
      /**
       * <code>FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER = 29;</code>
       */
      FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER(29),
      /**
       * <code>CUSTOMER_DISPLAY_INSTRUCTION = 30;</code>
       */
      CUSTOMER_DISPLAY_INSTRUCTION(30),
      /**
       * <code>NETTING = 31;</code>
       */
      NETTING(31),
      /**
       * <code>PEG_TO_VWAP = 32;</code>
       */
      PEG_TO_VWAP(32),
      /**
       * <code>TRADE_ALONG = 33;</code>
       */
      TRADE_ALONG(33),
      /**
       * <code>TRY_TO_STOP = 34;</code>
       */
      TRY_TO_STOP(34),
      /**
       * <code>CANCEL_IF_NOT_BEST = 35;</code>
       */
      CANCEL_IF_NOT_BEST(35),
      /**
       * <code>TRAILING_STOP_PEG = 36;</code>
       */
      TRAILING_STOP_PEG(36),
      /**
       * <code>STRICT_LIMIT = 37;</code>
       */
      STRICT_LIMIT(37),
      /**
       * <code>IGNORE_PRICE_VALIDITY_CHECKS = 38;</code>
       */
      IGNORE_PRICE_VALIDITY_CHECKS(38),
      /**
       * <code>PEG_TO_LIMIT_PRICE = 39;</code>
       */
      PEG_TO_LIMIT_PRICE(39),
      /**
       * <code>WORK_TO_TARGET_STRATEGY = 40;</code>
       */
      WORK_TO_TARGET_STRATEGY(40),
      /**
       * <code>INTERMARKET_SWEEP = 41;</code>
       */
      INTERMARKET_SWEEP(41),
      /**
       * <code>EXTERNAL_ROUTING_ALLOWED = 42;</code>
       */
      EXTERNAL_ROUTING_ALLOWED(42),
      /**
       * <code>EXTERNAL_ROUTING_NOT_ALLOWED = 43;</code>
       */
      EXTERNAL_ROUTING_NOT_ALLOWED(43),
      /**
       * <code>IMBALANCE_ONLY = 44;</code>
       */
      IMBALANCE_ONLY(44),
      /**
       * <code>SINGLE_EXECUTION_REQUESTED_FOR_BLOCK_TRADE = 45;</code>
       */
      SINGLE_EXECUTION_REQUESTED_FOR_BLOCK_TRADE(45),
      /**
       * <code>BEST_EXECUTION = 46;</code>
       */
      BEST_EXECUTION(46),
      /**
       * <code>SUSPEND_ON_SYSTEM_FAILURE = 47;</code>
       */
      SUSPEND_ON_SYSTEM_FAILURE(47),
      /**
       * <code>SUSPEND_ON_TRADING_HALT = 48;</code>
       */
      SUSPEND_ON_TRADING_HALT(48),
      /**
       * <code>REINSTATE_ON_CONNECTION_LOSS = 49;</code>
       */
      REINSTATE_ON_CONNECTION_LOSS(49),
      /**
       * <code>CACEL_ON_CONNECTION_LOSS = 50;</code>
       */
      CACEL_ON_CONNECTION_LOSS(50),
      /**
       * <code>SUSPEND_ON_CONNECTION_LOSS = 51;</code>
       */
      SUSPEND_ON_CONNECTION_LOSS(51),
      /**
       * <code>RELEASE = 52;</code>
       */
      RELEASE(52),
      /**
       * <code>EXCUTE_AS_DELTA_NEUTRAL_USING_VOLATILITY_PROVIDED = 53;</code>
       */
      EXCUTE_AS_DELTA_NEUTRAL_USING_VOLATILITY_PROVIDED(53),
      /**
       * <code>EXECUTE_AS_DURATION_NEUTRAL = 54;</code>
       */
      EXECUTE_AS_DURATION_NEUTRAL(54),
      /**
       * <code>EXECUTE_AS_FX_NEUTRAL = 55;</code>
       */
      EXECUTE_AS_FX_NEUTRAL(55),
      /**
       * <code>MINIMUN_GUARANTEED_FILL_ELIGIBLE = 56;</code>
       */
      MINIMUN_GUARANTEED_FILL_ELIGIBLE(56),
      /**
       * <code>BYPASS_NON_DISPLAY_LIQUIDITY = 57;</code>
       */
      BYPASS_NON_DISPLAY_LIQUIDITY(57),
      /**
       * <code>LOCK = 58;</code>
       */
      LOCK(58),
      /**
       * <code>IGNORE_NOTIONAL_VALUE_CHECKS = 59;</code>
       */
      IGNORE_NOTIONAL_VALUE_CHECKS(59),
      /**
       * <code>ALL_OR_NONETRADE_AT_REFERENCE_PRICE = 60;</code>
       */
      ALL_OR_NONETRADE_AT_REFERENCE_PRICE(60),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>STAY_ON_OFFER_SIDE = 0;</code>
       */
      public static final int STAY_ON_OFFER_SIDE_VALUE = 0;
      /**
       * <code>NOT_HELD = 1;</code>
       */
      public static final int NOT_HELD_VALUE = 1;
      /**
       * <code>WORK = 2;</code>
       */
      public static final int WORK_VALUE = 2;
      /**
       * <code>GO_ALONG = 3;</code>
       */
      public static final int GO_ALONG_VALUE = 3;
      /**
       * <code>OVER_THE_DAY = 4;</code>
       */
      public static final int OVER_THE_DAY_VALUE = 4;
      /**
       * <code>HELD = 5;</code>
       */
      public static final int HELD_VALUE = 5;
      /**
       * <code>PARTICIPATE_DO_NOT_INITIATE = 6;</code>
       */
      public static final int PARTICIPATE_DO_NOT_INITIATE_VALUE = 6;
      /**
       * <code>STRICT_SCALE = 7;</code>
       */
      public static final int STRICT_SCALE_VALUE = 7;
      /**
       * <code>TRY_TO_SCALE = 8;</code>
       */
      public static final int TRY_TO_SCALE_VALUE = 8;
      /**
       * <code>STAY_ON_BID_SIDE = 9;</code>
       */
      public static final int STAY_ON_BID_SIDE_VALUE = 9;
      /**
       * <code>NO_CROSS = 10;</code>
       */
      public static final int NO_CROSS_VALUE = 10;
      /**
       * <code>OK_TO_CROSS = 11;</code>
       */
      public static final int OK_TO_CROSS_VALUE = 11;
      /**
       * <code>CALL_FIRST = 12;</code>
       */
      public static final int CALL_FIRST_VALUE = 12;
      /**
       * <code>PRECENT_OF_VOLUME = 13;</code>
       */
      public static final int PRECENT_OF_VOLUME_VALUE = 13;
      /**
       * <code>NO_NOT_INCREASE = 14;</code>
       */
      public static final int NO_NOT_INCREASE_VALUE = 14;
      /**
       * <code>NO_NOT_REDUCE = 15;</code>
       */
      public static final int NO_NOT_REDUCE_VALUE = 15;
      /**
       * <code>ALL_OR_NONE = 16;</code>
       */
      public static final int ALL_OR_NONE_VALUE = 16;
      /**
       * <code>REINSTATE_ON_SYSTEM_FAILURE = 17;</code>
       */
      public static final int REINSTATE_ON_SYSTEM_FAILURE_VALUE = 17;
      /**
       * <code>INSTITUNIONS_ONLY = 18;</code>
       */
      public static final int INSTITUNIONS_ONLY_VALUE = 18;
      /**
       * <code>REINSTATE_ON_TRADING_HALT = 19;</code>
       */
      public static final int REINSTATE_ON_TRADING_HALT_VALUE = 19;
      /**
       * <code>CACEL_ON_TRADING_HALT = 20;</code>
       */
      public static final int CACEL_ON_TRADING_HALT_VALUE = 20;
      /**
       * <code>LAST_PEG = 21;</code>
       */
      public static final int LAST_PEG_VALUE = 21;
      /**
       * <code>MID_PRICE_PEG = 22;</code>
       */
      public static final int MID_PRICE_PEG_VALUE = 22;
      /**
       * <code>NON_NEGOTIABLE = 23;</code>
       */
      public static final int NON_NEGOTIABLE_VALUE = 23;
      /**
       * <code>OPENING_PEG = 24;</code>
       */
      public static final int OPENING_PEG_VALUE = 24;
      /**
       * <code>MARKET_PEG = 25;</code>
       */
      public static final int MARKET_PEG_VALUE = 25;
      /**
       * <code>CANCEL_ON_SYSTEM_FAILURE = 26;</code>
       */
      public static final int CANCEL_ON_SYSTEM_FAILURE_VALUE = 26;
      /**
       * <code>PRIMARY_PEG = 27;</code>
       */
      public static final int PRIMARY_PEG_VALUE = 27;
      /**
       * <code>SUSPEND = 28;</code>
       */
      public static final int SUSPEND_VALUE = 28;
      /**
       * <code>FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER = 29;</code>
       */
      public static final int FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER_VALUE = 29;
      /**
       * <code>CUSTOMER_DISPLAY_INSTRUCTION = 30;</code>
       */
      public static final int CUSTOMER_DISPLAY_INSTRUCTION_VALUE = 30;
      /**
       * <code>NETTING = 31;</code>
       */
      public static final int NETTING_VALUE = 31;
      /**
       * <code>PEG_TO_VWAP = 32;</code>
       */
      public static final int PEG_TO_VWAP_VALUE = 32;
      /**
       * <code>TRADE_ALONG = 33;</code>
       */
      public static final int TRADE_ALONG_VALUE = 33;
      /**
       * <code>TRY_TO_STOP = 34;</code>
       */
      public static final int TRY_TO_STOP_VALUE = 34;
      /**
       * <code>CANCEL_IF_NOT_BEST = 35;</code>
       */
      public static final int CANCEL_IF_NOT_BEST_VALUE = 35;
      /**
       * <code>TRAILING_STOP_PEG = 36;</code>
       */
      public static final int TRAILING_STOP_PEG_VALUE = 36;
      /**
       * <code>STRICT_LIMIT = 37;</code>
       */
      public static final int STRICT_LIMIT_VALUE = 37;
      /**
       * <code>IGNORE_PRICE_VALIDITY_CHECKS = 38;</code>
       */
      public static final int IGNORE_PRICE_VALIDITY_CHECKS_VALUE = 38;
      /**
       * <code>PEG_TO_LIMIT_PRICE = 39;</code>
       */
      public static final int PEG_TO_LIMIT_PRICE_VALUE = 39;
      /**
       * <code>WORK_TO_TARGET_STRATEGY = 40;</code>
       */
      public static final int WORK_TO_TARGET_STRATEGY_VALUE = 40;
      /**
       * <code>INTERMARKET_SWEEP = 41;</code>
       */
      public static final int INTERMARKET_SWEEP_VALUE = 41;
      /**
       * <code>EXTERNAL_ROUTING_ALLOWED = 42;</code>
       */
      public static final int EXTERNAL_ROUTING_ALLOWED_VALUE = 42;
      /**
       * <code>EXTERNAL_ROUTING_NOT_ALLOWED = 43;</code>
       */
      public static final int EXTERNAL_ROUTING_NOT_ALLOWED_VALUE = 43;
      /**
       * <code>IMBALANCE_ONLY = 44;</code>
       */
      public static final int IMBALANCE_ONLY_VALUE = 44;
      /**
       * <code>SINGLE_EXECUTION_REQUESTED_FOR_BLOCK_TRADE = 45;</code>
       */
      public static final int SINGLE_EXECUTION_REQUESTED_FOR_BLOCK_TRADE_VALUE = 45;
      /**
       * <code>BEST_EXECUTION = 46;</code>
       */
      public static final int BEST_EXECUTION_VALUE = 46;
      /**
       * <code>SUSPEND_ON_SYSTEM_FAILURE = 47;</code>
       */
      public static final int SUSPEND_ON_SYSTEM_FAILURE_VALUE = 47;
      /**
       * <code>SUSPEND_ON_TRADING_HALT = 48;</code>
       */
      public static final int SUSPEND_ON_TRADING_HALT_VALUE = 48;
      /**
       * <code>REINSTATE_ON_CONNECTION_LOSS = 49;</code>
       */
      public static final int REINSTATE_ON_CONNECTION_LOSS_VALUE = 49;
      /**
       * <code>CACEL_ON_CONNECTION_LOSS = 50;</code>
       */
      public static final int CACEL_ON_CONNECTION_LOSS_VALUE = 50;
      /**
       * <code>SUSPEND_ON_CONNECTION_LOSS = 51;</code>
       */
      public static final int SUSPEND_ON_CONNECTION_LOSS_VALUE = 51;
      /**
       * <code>RELEASE = 52;</code>
       */
      public static final int RELEASE_VALUE = 52;
      /**
       * <code>EXCUTE_AS_DELTA_NEUTRAL_USING_VOLATILITY_PROVIDED = 53;</code>
       */
      public static final int EXCUTE_AS_DELTA_NEUTRAL_USING_VOLATILITY_PROVIDED_VALUE = 53;
      /**
       * <code>EXECUTE_AS_DURATION_NEUTRAL = 54;</code>
       */
      public static final int EXECUTE_AS_DURATION_NEUTRAL_VALUE = 54;
      /**
       * <code>EXECUTE_AS_FX_NEUTRAL = 55;</code>
       */
      public static final int EXECUTE_AS_FX_NEUTRAL_VALUE = 55;
      /**
       * <code>MINIMUN_GUARANTEED_FILL_ELIGIBLE = 56;</code>
       */
      public static final int MINIMUN_GUARANTEED_FILL_ELIGIBLE_VALUE = 56;
      /**
       * <code>BYPASS_NON_DISPLAY_LIQUIDITY = 57;</code>
       */
      public static final int BYPASS_NON_DISPLAY_LIQUIDITY_VALUE = 57;
      /**
       * <code>LOCK = 58;</code>
       */
      public static final int LOCK_VALUE = 58;
      /**
       * <code>IGNORE_NOTIONAL_VALUE_CHECKS = 59;</code>
       */
      public static final int IGNORE_NOTIONAL_VALUE_CHECKS_VALUE = 59;
      /**
       * <code>ALL_OR_NONETRADE_AT_REFERENCE_PRICE = 60;</code>
       */
      public static final int ALL_OR_NONETRADE_AT_REFERENCE_PRICE_VALUE = 60;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ExecInstType valueOf(int value) {
        return forNumber(value);
      }

      public static ExecInstType forNumber(int value) {
        switch (value) {
          case 0: return STAY_ON_OFFER_SIDE;
          case 1: return NOT_HELD;
          case 2: return WORK;
          case 3: return GO_ALONG;
          case 4: return OVER_THE_DAY;
          case 5: return HELD;
          case 6: return PARTICIPATE_DO_NOT_INITIATE;
          case 7: return STRICT_SCALE;
          case 8: return TRY_TO_SCALE;
          case 9: return STAY_ON_BID_SIDE;
          case 10: return NO_CROSS;
          case 11: return OK_TO_CROSS;
          case 12: return CALL_FIRST;
          case 13: return PRECENT_OF_VOLUME;
          case 14: return NO_NOT_INCREASE;
          case 15: return NO_NOT_REDUCE;
          case 16: return ALL_OR_NONE;
          case 17: return REINSTATE_ON_SYSTEM_FAILURE;
          case 18: return INSTITUNIONS_ONLY;
          case 19: return REINSTATE_ON_TRADING_HALT;
          case 20: return CACEL_ON_TRADING_HALT;
          case 21: return LAST_PEG;
          case 22: return MID_PRICE_PEG;
          case 23: return NON_NEGOTIABLE;
          case 24: return OPENING_PEG;
          case 25: return MARKET_PEG;
          case 26: return CANCEL_ON_SYSTEM_FAILURE;
          case 27: return PRIMARY_PEG;
          case 28: return SUSPEND;
          case 29: return FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER;
          case 30: return CUSTOMER_DISPLAY_INSTRUCTION;
          case 31: return NETTING;
          case 32: return PEG_TO_VWAP;
          case 33: return TRADE_ALONG;
          case 34: return TRY_TO_STOP;
          case 35: return CANCEL_IF_NOT_BEST;
          case 36: return TRAILING_STOP_PEG;
          case 37: return STRICT_LIMIT;
          case 38: return IGNORE_PRICE_VALIDITY_CHECKS;
          case 39: return PEG_TO_LIMIT_PRICE;
          case 40: return WORK_TO_TARGET_STRATEGY;
          case 41: return INTERMARKET_SWEEP;
          case 42: return EXTERNAL_ROUTING_ALLOWED;
          case 43: return EXTERNAL_ROUTING_NOT_ALLOWED;
          case 44: return IMBALANCE_ONLY;
          case 45: return SINGLE_EXECUTION_REQUESTED_FOR_BLOCK_TRADE;
          case 46: return BEST_EXECUTION;
          case 47: return SUSPEND_ON_SYSTEM_FAILURE;
          case 48: return SUSPEND_ON_TRADING_HALT;
          case 49: return REINSTATE_ON_CONNECTION_LOSS;
          case 50: return CACEL_ON_CONNECTION_LOSS;
          case 51: return SUSPEND_ON_CONNECTION_LOSS;
          case 52: return RELEASE;
          case 53: return EXCUTE_AS_DELTA_NEUTRAL_USING_VOLATILITY_PROVIDED;
          case 54: return EXECUTE_AS_DURATION_NEUTRAL;
          case 55: return EXECUTE_AS_FX_NEUTRAL;
          case 56: return MINIMUN_GUARANTEED_FILL_ELIGIBLE;
          case 57: return BYPASS_NON_DISPLAY_LIQUIDITY;
          case 58: return LOCK;
          case 59: return IGNORE_NOTIONAL_VALUE_CHECKS;
          case 60: return ALL_OR_NONETRADE_AT_REFERENCE_PRICE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ExecInstType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          ExecInstType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ExecInstType>() {
              public ExecInstType findValueByNumber(int number) {
                return ExecInstType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return EnumContainerOuterClass.EnumContainer.getDescriptor().getEnumTypes().get(5);
      }

      private static final ExecInstType[] VALUES = values();

      public static ExecInstType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private ExecInstType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:neueda.fix.EnumContainer.ExecInstType)
    }

    /**
     * Protobuf enum {@code neueda.fix.EnumContainer.TimeInfoceType}
     */
    public enum TimeInfoceType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>DAY = 0;</code>
       */
      DAY(0),
      /**
       * <code>GOOD_TILL_CANCEL = 1;</code>
       */
      GOOD_TILL_CANCEL(1),
      /**
       * <code>AT_THE_OPENING = 2;</code>
       */
      AT_THE_OPENING(2),
      /**
       * <code>INMEDIATE_OR_CANCEL = 3;</code>
       */
      INMEDIATE_OR_CANCEL(3),
      /**
       * <code>FILL_OR_KILL = 4;</code>
       */
      FILL_OR_KILL(4),
      /**
       * <code>GOOD_TILL_CORSSING = 5;</code>
       */
      GOOD_TILL_CORSSING(5),
      /**
       * <code>GOOD_TILL_DATE = 6;</code>
       */
      GOOD_TILL_DATE(6),
      /**
       * <code>AT_THE_CLOSE = 7;</code>
       */
      AT_THE_CLOSE(7),
      /**
       * <code>GOOD_THROUGH = 8;</code>
       */
      GOOD_THROUGH(8),
      /**
       * <code>AT_CROSSING = 9;</code>
       */
      AT_CROSSING(9),
      /**
       * <code>GOOD_FOR_TIME = 10;</code>
       */
      GOOD_FOR_TIME(10),
      /**
       * <code>GOOD_FOR_AUCTION = 11;</code>
       */
      GOOD_FOR_AUCTION(11),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>DAY = 0;</code>
       */
      public static final int DAY_VALUE = 0;
      /**
       * <code>GOOD_TILL_CANCEL = 1;</code>
       */
      public static final int GOOD_TILL_CANCEL_VALUE = 1;
      /**
       * <code>AT_THE_OPENING = 2;</code>
       */
      public static final int AT_THE_OPENING_VALUE = 2;
      /**
       * <code>INMEDIATE_OR_CANCEL = 3;</code>
       */
      public static final int INMEDIATE_OR_CANCEL_VALUE = 3;
      /**
       * <code>FILL_OR_KILL = 4;</code>
       */
      public static final int FILL_OR_KILL_VALUE = 4;
      /**
       * <code>GOOD_TILL_CORSSING = 5;</code>
       */
      public static final int GOOD_TILL_CORSSING_VALUE = 5;
      /**
       * <code>GOOD_TILL_DATE = 6;</code>
       */
      public static final int GOOD_TILL_DATE_VALUE = 6;
      /**
       * <code>AT_THE_CLOSE = 7;</code>
       */
      public static final int AT_THE_CLOSE_VALUE = 7;
      /**
       * <code>GOOD_THROUGH = 8;</code>
       */
      public static final int GOOD_THROUGH_VALUE = 8;
      /**
       * <code>AT_CROSSING = 9;</code>
       */
      public static final int AT_CROSSING_VALUE = 9;
      /**
       * <code>GOOD_FOR_TIME = 10;</code>
       */
      public static final int GOOD_FOR_TIME_VALUE = 10;
      /**
       * <code>GOOD_FOR_AUCTION = 11;</code>
       */
      public static final int GOOD_FOR_AUCTION_VALUE = 11;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TimeInfoceType valueOf(int value) {
        return forNumber(value);
      }

      public static TimeInfoceType forNumber(int value) {
        switch (value) {
          case 0: return DAY;
          case 1: return GOOD_TILL_CANCEL;
          case 2: return AT_THE_OPENING;
          case 3: return INMEDIATE_OR_CANCEL;
          case 4: return FILL_OR_KILL;
          case 5: return GOOD_TILL_CORSSING;
          case 6: return GOOD_TILL_DATE;
          case 7: return AT_THE_CLOSE;
          case 8: return GOOD_THROUGH;
          case 9: return AT_CROSSING;
          case 10: return GOOD_FOR_TIME;
          case 11: return GOOD_FOR_AUCTION;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<TimeInfoceType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          TimeInfoceType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<TimeInfoceType>() {
              public TimeInfoceType findValueByNumber(int number) {
                return TimeInfoceType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return EnumContainerOuterClass.EnumContainer.getDescriptor().getEnumTypes().get(6);
      }

      private static final TimeInfoceType[] VALUES = values();

      public static TimeInfoceType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private TimeInfoceType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:neueda.fix.EnumContainer.TimeInfoceType)
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof EnumContainerOuterClass.EnumContainer)) {
        return super.equals(obj);
      }
      EnumContainerOuterClass.EnumContainer other = (EnumContainerOuterClass.EnumContainer) obj;

      boolean result = true;
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static EnumContainerOuterClass.EnumContainer parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static EnumContainerOuterClass.EnumContainer parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static EnumContainerOuterClass.EnumContainer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static EnumContainerOuterClass.EnumContainer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static EnumContainerOuterClass.EnumContainer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static EnumContainerOuterClass.EnumContainer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static EnumContainerOuterClass.EnumContainer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static EnumContainerOuterClass.EnumContainer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static EnumContainerOuterClass.EnumContainer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static EnumContainerOuterClass.EnumContainer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static EnumContainerOuterClass.EnumContainer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static EnumContainerOuterClass.EnumContainer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(EnumContainerOuterClass.EnumContainer prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code neueda.fix.EnumContainer}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:neueda.fix.EnumContainer)
        EnumContainerOuterClass.EnumContainerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return EnumContainerOuterClass.internal_static_neueda_fix_EnumContainer_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return EnumContainerOuterClass.internal_static_neueda_fix_EnumContainer_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                EnumContainerOuterClass.EnumContainer.class, EnumContainerOuterClass.EnumContainer.Builder.class);
      }

      // Construct using com.neueda.etiqet.rabbitmq.EnumContainerOuterClass.EnumContainer.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return EnumContainerOuterClass.internal_static_neueda_fix_EnumContainer_descriptor;
      }

      @java.lang.Override
      public EnumContainerOuterClass.EnumContainer getDefaultInstanceForType() {
        return EnumContainerOuterClass.EnumContainer.getDefaultInstance();
      }

      @java.lang.Override
      public EnumContainerOuterClass.EnumContainer build() {
        EnumContainerOuterClass.EnumContainer result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public EnumContainerOuterClass.EnumContainer buildPartial() {
        EnumContainerOuterClass.EnumContainer result = new EnumContainerOuterClass.EnumContainer(this);
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof EnumContainerOuterClass.EnumContainer) {
          return mergeFrom((EnumContainerOuterClass.EnumContainer)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(EnumContainerOuterClass.EnumContainer other) {
        if (other == EnumContainerOuterClass.EnumContainer.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        EnumContainerOuterClass.EnumContainer parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (EnumContainerOuterClass.EnumContainer) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:neueda.fix.EnumContainer)
    }

    // @@protoc_insertion_point(class_scope:neueda.fix.EnumContainer)
    private static final EnumContainerOuterClass.EnumContainer DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new EnumContainerOuterClass.EnumContainer();
    }

    public static EnumContainerOuterClass.EnumContainer getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<EnumContainer>
        PARSER = new com.google.protobuf.AbstractParser<EnumContainer>() {
      @java.lang.Override
      public EnumContainer parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EnumContainer(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<EnumContainer> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<EnumContainer> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public EnumContainerOuterClass.EnumContainer getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_neueda_fix_EnumContainer_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_neueda_fix_EnumContainer_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\023EnumContainer.proto\022\nneueda.fix\"\320\025\n\rEn" +
      "umContainer\"\272\001\n\tEventType\022\014\n\010NONE_EVT\020\000\022" +
      "\014\n\010ACCEPTED\020\001\022\014\n\010REJECTED\020\002\022\n\n\006FILLED\020\003\022" +
      "\010\n\004DONE\020\004\022\013\n\007EXPIRED\020\005\022\n\n\006CANCEL\020\006\022\023\n\017CA" +
      "NCEL_ACCEPTED\020\007\022\022\n\016CANCEL_PENDING\020\010\022\023\n\017C" +
      "ANCEL_REJECTED\020\t\022\026\n\022UNSOLICITED_CANCEL\020\n" +
      "\"o\n\004Side\022\n\n\006NONE_S\020\000\022\007\n\003BUY\020\001\022\010\n\004SELL\020\002\022" +
      "\016\n\nSELL_SHORT\020\003\022\025\n\021SELL_SHORT_EXEMPT\020\004\022\r" +
      "\n\tBUY_MINUS\020\005\022\022\n\016SELL_SIDE_PLUS\020\006\"-\n\020Rej" +
      "ectReasonType\022\n\n\006NONE_R\020\000\022\r\n\tNO_MARKET\020\001" +
      "\"I\n\016StatusFlagType\022\n\n\006NONE_F\020\000\022\r\n\tWILL_F" +
      "ILL\020\001\022\r\n\tLAST_FILL\020\002\022\r\n\tAGGRESSOR\020\003\"\265\004\n\t" +
      "OrderType\022\014\n\010NONE_ORD\020\000\022\n\n\006MARKET\020\001\022\t\n\005L" +
      "IMIT\020\002\022\r\n\tSTOP_LOSS\020\003\022\016\n\nSTOP_LIMIT\020\004\022\023\n" +
      "\017MARKET_ON_CLOSE\020\005\022\023\n\017WITH_OR_WITHOUT\020\006\022" +
      "\023\n\017LIMIT_OR_BETTER\020\007\022\031\n\025LIMIT_WITH_OR_WI" +
      "THOUT\020\010\022\014\n\010ON_BASIS\020\t\022\014\n\010ON_CLOSE\020\n\022\022\n\016L" +
      "IMIT_ON_CLOSE\020\013\022\020\n\014FOREX_MARKET\020\014\022\025\n\021PRE" +
      "VIOUSLY_QUOTED\020\r\022\030\n\024PREVIOUSLY_INDICATED" +
      "\020\016\022\017\n\013FOREX_LIMIT\020\017\022\034\n\030FORTEX_PREVIOUSLY" +
      "_QUOTED\020\020\022\n\n\006FUNARI\020\021\022\025\n\021MARKET_IF_TOUCH" +
      "ED\020\022\022\"\n\036MARKET_WITH_LEFT_OVER_AS_LIMIT\020\023" +
      "\022!\n\035PREVIOUS_FUND_VALUATION_POINT\020\024\022\035\n\031N" +
      "EXT_FUND_VALUATION_POINT\020\025\022\n\n\006PEGGED\020\026\022\031" +
      "\n\025COUNT_ORDER_SELECTION\020\027\022\030\n\024STOP_ON_BID" +
      "_OR_OFFER\020\030\022\036\n\032STOP_LIMIT_ON_BID_OR_OFFE" +
      "R\020\031\"\343\013\n\014ExecInstType\022\026\n\022STAY_ON_OFFER_SI" +
      "DE\020\000\022\014\n\010NOT_HELD\020\001\022\010\n\004WORK\020\002\022\014\n\010GO_ALONG" +
      "\020\003\022\020\n\014OVER_THE_DAY\020\004\022\010\n\004HELD\020\005\022\037\n\033PARTIC" +
      "IPATE_DO_NOT_INITIATE\020\006\022\020\n\014STRICT_SCALE\020" +
      "\007\022\020\n\014TRY_TO_SCALE\020\010\022\024\n\020STAY_ON_BID_SIDE\020" +
      "\t\022\014\n\010NO_CROSS\020\n\022\017\n\013OK_TO_CROSS\020\013\022\016\n\nCALL" +
      "_FIRST\020\014\022\025\n\021PRECENT_OF_VOLUME\020\r\022\023\n\017NO_NO" +
      "T_INCREASE\020\016\022\021\n\rNO_NOT_REDUCE\020\017\022\017\n\013ALL_O" +
      "R_NONE\020\020\022\037\n\033REINSTATE_ON_SYSTEM_FAILURE\020" +
      "\021\022\025\n\021INSTITUNIONS_ONLY\020\022\022\035\n\031REINSTATE_ON" +
      "_TRADING_HALT\020\023\022\031\n\025CACEL_ON_TRADING_HALT" +
      "\020\024\022\014\n\010LAST_PEG\020\025\022\021\n\rMID_PRICE_PEG\020\026\022\022\n\016N" +
      "ON_NEGOTIABLE\020\027\022\017\n\013OPENING_PEG\020\030\022\016\n\nMARK" +
      "ET_PEG\020\031\022\034\n\030CANCEL_ON_SYSTEM_FAILURE\020\032\022\017" +
      "\n\013PRIMARY_PEG\020\033\022\013\n\007SUSPEND\020\034\0229\n5FIXED_PE" +
      "G_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_" +
      "ORDER\020\035\022 \n\034CUSTOMER_DISPLAY_INSTRUCTION\020" +
      "\036\022\013\n\007NETTING\020\037\022\017\n\013PEG_TO_VWAP\020 \022\017\n\013TRADE" +
      "_ALONG\020!\022\017\n\013TRY_TO_STOP\020\"\022\026\n\022CANCEL_IF_N" +
      "OT_BEST\020#\022\025\n\021TRAILING_STOP_PEG\020$\022\020\n\014STRI" +
      "CT_LIMIT\020%\022 \n\034IGNORE_PRICE_VALIDITY_CHEC" +
      "KS\020&\022\026\n\022PEG_TO_LIMIT_PRICE\020\'\022\033\n\027WORK_TO_" +
      "TARGET_STRATEGY\020(\022\025\n\021INTERMARKET_SWEEP\020)" +
      "\022\034\n\030EXTERNAL_ROUTING_ALLOWED\020*\022 \n\034EXTERN" +
      "AL_ROUTING_NOT_ALLOWED\020+\022\022\n\016IMBALANCE_ON" +
      "LY\020,\022.\n*SINGLE_EXECUTION_REQUESTED_FOR_B" +
      "LOCK_TRADE\020-\022\022\n\016BEST_EXECUTION\020.\022\035\n\031SUSP" +
      "END_ON_SYSTEM_FAILURE\020/\022\033\n\027SUSPEND_ON_TR" +
      "ADING_HALT\0200\022 \n\034REINSTATE_ON_CONNECTION_" +
      "LOSS\0201\022\034\n\030CACEL_ON_CONNECTION_LOSS\0202\022\036\n\032" +
      "SUSPEND_ON_CONNECTION_LOSS\0203\022\013\n\007RELEASE\020" +
      "4\0225\n1EXCUTE_AS_DELTA_NEUTRAL_USING_VOLAT" +
      "ILITY_PROVIDED\0205\022\037\n\033EXECUTE_AS_DURATION_" +
      "NEUTRAL\0206\022\031\n\025EXECUTE_AS_FX_NEUTRAL\0207\022$\n " +
      "MINIMUN_GUARANTEED_FILL_ELIGIBLE\0208\022 \n\034BY" +
      "PASS_NON_DISPLAY_LIQUIDITY\0209\022\010\n\004LOCK\020:\022 " +
      "\n\034IGNORE_NOTIONAL_VALUE_CHECKS\020;\022\'\n#ALL_" +
      "OR_NONETRADE_AT_REFERENCE_PRICE\020<\"\370\001\n\016Ti" +
      "meInfoceType\022\007\n\003DAY\020\000\022\024\n\020GOOD_TILL_CANCE" +
      "L\020\001\022\022\n\016AT_THE_OPENING\020\002\022\027\n\023INMEDIATE_OR_" +
      "CANCEL\020\003\022\020\n\014FILL_OR_KILL\020\004\022\026\n\022GOOD_TILL_" +
      "CORSSING\020\005\022\022\n\016GOOD_TILL_DATE\020\006\022\020\n\014AT_THE" +
      "_CLOSE\020\007\022\020\n\014GOOD_THROUGH\020\010\022\017\n\013AT_CROSSIN" +
      "G\020\t\022\021\n\rGOOD_FOR_TIME\020\n\022\024\n\020GOOD_FOR_AUCTI" +
      "ON\020\013b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_neueda_fix_EnumContainer_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_neueda_fix_EnumContainer_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_neueda_fix_EnumContainer_descriptor,
        new java.lang.String[] { });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
